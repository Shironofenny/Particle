#ifndef __PARTICLESYSTEM_H__
#define __PARTICLESYSTEM_H__

#include <vector>
#include <string>

#include "Particle.h"

using namespace std;

class ParticleSystem
{
public:

	// Constructor
	// A particle system is defined by a specific texture of particle, a pre-defined color sequence, 
	// lifetime for each particle, specific solid angle generation region ((\theta, \phi) pair), 
	// and particle generation per time (density).
	//
	// Also could be linked into a vector field, which is generated by
	//
	// NOTE Better to be constucted from xml file.
	ParticleSystem();

	// Destructor
	~ParticleSystem();

	// Get all the informations from an XML file
	void parseXML(string const & _filename);

	// The update function of the whole particle system
	void update(double dt);

	// The render function of the whole particle system
	void render(Camera & _camera);

	// Get the total number of particles
	int getParticleNumber();

	// Get all the particles
	vector<Particle> & getParticles();
	vector<Particle> const & getParticles() const;

	// Get the source point of the particle system
	Vector & getSource();
	Vector const & getSource() const;

protected:
	
	// Get the interpolated color out from the particle system
	void interpolateColor();

	// The container of all particles
	vector <Particle> m_Particles;

	// The number of particle's texture.
	GLuint m_ParticleTexture;

	// The life time of each particle
	float m_LifeMean;
	float m_LifeVar;

	// The center of this particle system
	Vector m_SourceMean;
	float m_SourceVar;

	// The velocity of each particle
	float m_VelocityMean;
	float m_VelocityVar;

	// The mass of each particle
	float m_MassMean;
	float m_MassVar;

	// The number of particles generated per second
	float m_GenerationPerSecond;

};

#endif
